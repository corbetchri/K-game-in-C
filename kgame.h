/**
 * NWEN 241 Programming Assignment 3
 * kgame.h Header File
 *
 * IMPORTANT: DO NOT EDIT THIS FILE.
 */

#ifndef __KGAME_H__
#define __KGAME_H__

#include <stdbool.h>

/* This is the title of the game */
#define KGAME_TITLE         "The K-Game"

/* This is the file name of the saved game state */
#define KGAME_SAVE_FILE     "kgame.sav"

/* Number of tiles per side */
#define KGAME_SIDES         4

/* Output buffer size in bytess */
#define KGAME_OUTPUT_BUFLEN	((18*40)+1)

/* Structure type to hold the state of the game */
typedef struct kgame {
    /* the game board */
	char board[KGAME_SIDES][KGAME_SIDES];
    /* current score */
	int score;
} kgame_t;

/* Enumeration type to represent arrow keys */
typedef enum direction { UP = 1, DOWN, LEFT, RIGHT } dir_t;

/* Enumeration type to represent other keys accepted by game */
typedef enum input { LOAD = RIGHT+1, SAVE, EXIT } input_t;

/**
 * Initialize the game.
 * Set all elements in the game board to the space ' '  character
 * and set score to 0.
 * @param game Pointer to the game structure
 */
void kgame_init(kgame_t *game);

/**
 * Adds random A or B tile to the game.
 * You have to fix the current implementation which is very dumb (see kgame.c).
 * @param game Pointer to the game structure
 */
void kgame_add_random_tile(kgame_t *game);


/**
 * Renders the game, show the socre and game board.
 * In this assignment, we will not specify how the game field should be
 * drawn. Feel free to implement your own design. The function must not directly
 * output to the screen, rather, the output should be directed to
 * output_buffer. The output should not exceed 18 lines, and every line should not
 * exceed 40 characters.
 * @param output_buffer Pointer to an array of characters
 * @param game Pointer to the game structure to render
 */
void kgame_render(char *output_buffer, const kgame_t *game);


/**
 * Checks whether game is already won.
 * Returns true, if tile with letter 'K' is located on the board. Returns
 * false, if it is not.
 * @param game Pointer to the game structure
 * @return true, if game is won, or false otherwise.
 */
bool kgame_is_won(const kgame_t *game);


/**
 * Checks whether it is possible to make move.
 * Function checks game board if it is possible to make another move. A move
 * is possible there is at least one empty field (tile) in the game field, or,
 * at least two adjacent tiles of the same character are located either
 * vertically or horizontally in the grid.
 * @param game Pointer to the game structure
 * @return true, if another movement is possible, or false otherwise.
 */
bool kgame_is_move_possible(const kgame_t *game);


/**
 * Makes a move in the given direction.
 * If it is possible, function makes move in given direction, updates the
 * current game state (board and score) and returns true. If it is not
 * possible to move, returns false.
 * @param game Pointer to the game structure
 * @param direction Direction of move (UP, DOWN, LEFT or RIGHT)
 * @return true, if game state was updated, false otherwise
 */
bool kgame_update(kgame_t *game, dir_t direction);


/**
 * Saves the game state to a file.
 * The function must write the contents of game to a file. The name of the file
 * is specified by the symbolic constant KGAME_SAVE_FILE. If the file already
 * exists, its contents are overwritten. The format of the file is simple and is
 * shown in the Assignment 3 Task 5 specifications.
 * @param game Pointer to the game structure
 */
void kgame_save(const kgame_t *game);


/**
 * Load game state from a file.
 * The function must read the contents of KGAME_SAVE_FILE and ``copy'' the
 * contents to the structure pointed to by game accordingly. If the file
 * does not exist, or if the file format is invalid, or the contents are invalid,
 * the function must not modify game and must return false. If the file exists
 * and its contents are valid, then the function must modify game accordingly and
 * return true.
 * @param game Pointer to the game structure
 */
bool kgame_load(kgame_t *game);

#endif /* __KGAME_H__ */

